#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18033
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Blackjack
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="Assignments")]
	public partial class BoardDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertLeaderboard(Leaderboard instance);
    partial void UpdateLeaderboard(Leaderboard instance);
    partial void DeleteLeaderboard(Leaderboard instance);
    #endregion
		
		public BoardDataContext() : 
				base(global::Blackjack.Properties.Settings.Default.AssignmentsConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public BoardDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BoardDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BoardDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public BoardDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Leaderboard> Leaderboards
		{
			get
			{
				return this.GetTable<Leaderboard>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Leaderboard")]
	public partial class Leaderboard : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private short _Player_ID;
		
		private string _Player_Name;
		
		private short _Player_Score;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPlayer_IDChanging(short value);
    partial void OnPlayer_IDChanged();
    partial void OnPlayer_NameChanging(string value);
    partial void OnPlayer_NameChanged();
    partial void OnPlayer_ScoreChanging(short value);
    partial void OnPlayer_ScoreChanged();
    #endregion
		
		public Leaderboard()
		{
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player_ID", AutoSync=AutoSync.OnInsert, DbType="SmallInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public short Player_ID
		{
			get
			{
				return this._Player_ID;
			}
			set
			{
				if ((this._Player_ID != value))
				{
					this.OnPlayer_IDChanging(value);
					this.SendPropertyChanging();
					this._Player_ID = value;
					this.SendPropertyChanged("Player_ID");
					this.OnPlayer_IDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player_Name", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string Player_Name
		{
			get
			{
				return this._Player_Name;
			}
			set
			{
				if ((this._Player_Name != value))
				{
					this.OnPlayer_NameChanging(value);
					this.SendPropertyChanging();
					this._Player_Name = value;
					this.SendPropertyChanged("Player_Name");
					this.OnPlayer_NameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Player_Score", DbType="SmallInt NOT NULL")]
		public short Player_Score
		{
			get
			{
				return this._Player_Score;
			}
			set
			{
				if ((this._Player_Score != value))
				{
					this.OnPlayer_ScoreChanging(value);
					this.SendPropertyChanging();
					this._Player_Score = value;
					this.SendPropertyChanged("Player_Score");
					this.OnPlayer_ScoreChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
}
#pragma warning restore 1591
